// Updated Prisma Schema - Synced with Supabase Database
// This reflects all manual SQL changes made to the database
// Includes both public schema (app tables) and auth schema (Supabase Auth)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "auth"]
}

// ============================================
// PUBLIC SCHEMA - Application Tables
// ============================================

// Admin Model - Updated with new fields
model admins {
  admin_id              Int                     @id @default(autoincrement())
  name                  String                  @db.VarChar(100)
  email                 String                  @unique @db.VarChar(150)
  password_hash         String                  @db.VarChar(255)
  role                  role_type               @default(ADMIN)
  custom_role           String?                 @db.VarChar(150)
  permissions           Json?                   @db.JsonB
  two_factor            Boolean                 @default(false)
  created_at            DateTime                @default(now()) @db.Timestamp(6)
  last_login            DateTime?               @db.Timestamp(6)
  is_super_admin        Boolean                 @default(false)
  supabase_user_id      String?                 @unique @db.Uuid
  
  // Relations
  admin_activity_log    admin_activity_log[]
  contests              contests[]              @relation("contest_creator")
  reviewed_contests     contests[]              @relation("contest_reviewer")
  draws                 draws[]
  messages              messages[]
  
  @@schema("public")
}

// Admin Activity Log Model
model admin_activity_log {
  log_id       Int             @id @default(autoincrement())
  admin_id     Int
  action       String
  target_table String          @db.VarChar(100)
  target_id    Int?
  session_id   String?         @db.VarChar(255)
  status       activity_status @default(SUCCESS)
  timestamp    DateTime        @default(now()) @db.Timestamp(6)
  
  // Relations
  admin        admins          @relation(fields: [admin_id], references: [admin_id], onDelete: Cascade)
  
  @@schema("public")
}

// Contest Model
model contests {
  contest_id        Int              @id @default(autoincrement())
  name              String           @db.VarChar(150)
  theme             String?          @db.VarChar(150)
  description       String?
  entry_form_id     Int?
  start_date        DateTime         @db.Timestamp(6)
  end_date          DateTime         @db.Timestamp(6)
  entry_rules       Json?            @db.JsonB
  status            contest_status   @default(UPCOMING)
  created_by        Int?
  created_at        DateTime         @default(now()) @db.Timestamp(6)
  qr_code_url       String?          @db.VarChar(500)
  approval_status   approval_status  @default(APPROVED)
  reviewed_by       Int?
  reviewed_at       DateTime?        @db.Timestamp(6)
  rejection_reason  String?
  whatsapp_number   String?          // WhatsApp number with country code (no + or spaces)
  whatsapp_message  String?          // Custom welcome message for WhatsApp link
  
  // Relations
  creator           admins?          @relation("contest_creator", fields: [created_by], references: [admin_id])
  reviewer          admins?          @relation("contest_reviewer", fields: [reviewed_by], references: [admin_id])
  entry_form        forms?           @relation(fields: [entry_form_id], references: [form_id])
  draws             draws[]
  messages          messages[]
  participants      participants[]
  prizes            prizes[]
  
  @@schema("public")
}

// Prize Model
model prizes {
  prize_id    Int       @id @default(autoincrement())
  contest_id  Int
  prize_name  String    @db.VarChar(150)
  value       Decimal?  @db.Decimal(12, 2)
  quantity    Int       @default(1)
  description String?
  
  // Relations
  contest     contests  @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  winners     winners[]
  
  @@schema("public")
}

// Participant Model
model participants {
  participant_id   Int            @id @default(autoincrement())
  contest_id       Int
  name             String         @db.VarChar(150)
  form_response_id Int?
  contact          String         @db.VarChar(150)
  entry_timestamp  DateTime       @default(now()) @db.Timestamp(6)
  validated        Boolean        @default(true)
  unique_token     String?        @unique @db.VarChar(255)
  
  // Relations
  contest          contests       @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  form_response    form_responses? @relation(fields: [form_response_id], references: [response_id])
  winners          winners[]
  messages         messages[]
  
  @@schema("public")
}

// Draw Model
model draws {
  draw_id       Int       @id @default(autoincrement())
  contest_id    Int
  draw_mode     draw_mode
  executed_by   Int?
  executed_at   DateTime  @default(now()) @db.Timestamp(6)
  total_winners Int
  
  // Relations
  contest       contests  @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  executor      admins?   @relation(fields: [executed_by], references: [admin_id])
  winners       winners[]
  
  @@schema("public")
}

// Winner Model
model winners {
  winner_id      Int          @id @default(autoincrement())
  draw_id        Int
  participant_id Int
  prize_id       Int?
  prize_status   prize_status @default(PENDING)
  notified       Boolean      @default(false)
  notified_at    DateTime?    @db.Timestamp(6)
  
  // Relations
  draw           draws        @relation(fields: [draw_id], references: [draw_id], onDelete: Cascade)
  participant    participants @relation(fields: [participant_id], references: [participant_id], onDelete: Cascade)
  prize          prizes?      @relation(fields: [prize_id], references: [prize_id])
  
  @@schema("public")
}

// Message Model
model messages {
  message_id     Int          @id @default(autoincrement())
  contest_id     Int
  participant_id Int?
  type           message_type
  recipient      String       @db.VarChar(150)
  content        String
  sent_at        DateTime     @default(now()) @db.Timestamp(6)
  sent_by        Int?
  is_auto        Boolean      @default(false)
  
  // Relations
  contest        contests     @relation(fields: [contest_id], references: [contest_id], onDelete: Cascade)
  participant    participants? @relation(fields: [participant_id], references: [participant_id], onDelete: Cascade)
  sender         admins?      @relation(fields: [sent_by], references: [admin_id])
  
  @@schema("public")
}

// Form Model
model forms {
  form_id     Int              @id @default(autoincrement())
  form_name   String           @db.VarChar(150)
  form_schema Json?            @db.JsonB
  created_at  DateTime         @default(now()) @db.Timestamp(6)
  
  // Relations
  contests    contests[]
  responses   form_responses[]
  
  @@schema("public")
}

// Form Response Model
model form_responses {
  response_id   Int            @id @default(autoincrement())
  form_id       Int?
  response_data Json?          @db.JsonB
  submitted_at  DateTime       @default(now()) @db.Timestamp(6)
  
  // Relations
  form          forms?         @relation(fields: [form_id], references: [form_id])
  participants  participants[]
  
  @@schema("public")
}

// ============================================
// ENUMS
// ============================================

enum role_type {
  SUPER_ADMIN
  ADMIN
  MODERATOR
  
  @@schema("public")
}

enum contest_status {
  DRAFT
  UPCOMING
  ONGOING
  COMPLETED
  CANCELLED
  
  @@schema("public")
}

enum approval_status {
  PENDING
  APPROVED
  REJECTED
  
  @@schema("public")
}

enum activity_status {
  SUCCESS
  FAILED
  
  @@schema("public")
}

enum message_type {
  EMAIL
  SMS
  WHATSAPP
  PUSH
  
  @@schema("public")
}

enum prize_status {
  PENDING
  CLAIMED
  SHIPPED
  
  @@schema("public")
}

enum draw_mode {
  RANDOM
  SEQUENTIAL
  WEIGHTED
  
  @@schema("public")
}

// ============================================
// AUTH SCHEMA - Supabase Authentication Tables
// ============================================

// Supabase Auth Users
model users {
  id                   String    @id @db.Uuid
  email                String?   @unique
  encrypted_password   String?
  email_confirmed_at   DateTime? @db.Timestamptz(6)
  invited_at           DateTime? @db.Timestamptz(6)
  confirmation_token   String?   @unique
  confirmation_sent_at DateTime? @db.Timestamptz(6)
  recovery_token       String?   @unique
  recovery_sent_at     DateTime? @db.Timestamptz(6)
  email_change_token_new String? @unique
  email_change         String?
  email_change_sent_at DateTime? @db.Timestamptz(6)
  last_sign_in_at      DateTime? @db.Timestamptz(6)
  raw_app_meta_data    Json?
  raw_user_meta_data   Json?
  is_super_admin       Boolean?
  created_at           DateTime? @db.Timestamptz(6)
  updated_at           DateTime? @db.Timestamptz(6)
  phone                String?   @unique
  phone_confirmed_at   DateTime? @db.Timestamptz(6)
  phone_change         String?
  phone_change_token   String?   @unique
  phone_change_sent_at DateTime? @db.Timestamptz(6)
  confirmed_at         DateTime? @db.Timestamptz(6)
  email_change_token_current String? @unique
  email_change_confirm_status Int? @default(0) @db.SmallInt
  banned_until         DateTime? @db.Timestamptz(6)
  reauthentication_token String? @unique
  reauthentication_sent_at DateTime? @db.Timestamptz(6)
  is_sso_user          Boolean   @default(false)
  deleted_at           DateTime? @db.Timestamptz(6)
  
  // Relations
  identities           identities[]
  sessions             sessions[]
  mfa_factors          mfa_factors[]
  
  @@schema("auth")
}

// Supabase Auth Identities
model identities {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String    @db.Uuid
  identity_data   Json
  provider        String
  last_sign_in_at DateTime? @db.Timestamptz(6)
  created_at      DateTime? @db.Timestamptz(6)
  updated_at      DateTime? @db.Timestamptz(6)
  email           String?
  
  // Relations
  user            users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@unique([provider, email])
  @@schema("auth")
}

// Supabase Auth Sessions
model sessions {
  id           String    @id @db.Uuid
  user_id      String    @db.Uuid
  created_at   DateTime? @db.Timestamptz(6)
  updated_at   DateTime? @db.Timestamptz(6)
  factor_id    String?   @db.Uuid
  aal          String?
  not_after    DateTime? @db.Timestamptz(6)
  
  // Relations
  user         users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  
  @@schema("auth")
}

// Supabase Auth MFA Factors
model mfa_factors {
  id            String    @id @db.Uuid
  user_id       String    @db.Uuid
  friendly_name String?
  factor_type   String
  status        String
  created_at    DateTime  @db.Timestamptz(6)
  updated_at    DateTime  @db.Timestamptz(6)
  secret        String?
  
  // Relations
  user          users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  challenges    mfa_challenges[]
  
  @@schema("auth")
}

// Supabase Auth MFA Challenges
model mfa_challenges {
  id          String    @id @db.Uuid
  factor_id   String    @db.Uuid
  created_at  DateTime  @db.Timestamptz(6)
  verified_at DateTime? @db.Timestamptz(6)
  ip_address  String
  
  // Relations
  factor      mfa_factors @relation(fields: [factor_id], references: [id], onDelete: Cascade)
  
  @@schema("auth")
}

// Supabase Auth Refresh Tokens
model refresh_tokens {
  id          BigInt    @id @default(autoincrement())
  token       String?   @unique
  user_id     String?
  revoked     Boolean?
  created_at  DateTime? @db.Timestamptz(6)
  updated_at  DateTime? @db.Timestamptz(6)
  parent      String?   @unique
  session_id  String?   @db.Uuid
  
  @@schema("auth")
}
